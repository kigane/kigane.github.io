(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{378:function(t,s,n){"use strict";n.r(s);var a=n(44),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"nemu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nemu"}},[t._v("#")]),t._v(" NEMU")]),t._v(" "),n("h3",{attrs:{id:"getopt-int-argc-char-const-argv-const-char-optstring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getopt-int-argc-char-const-argv-const-char-optstring"}},[t._v("#")]),t._v(" getopt(int argc, char* const argv[], const char* optstring)")]),t._v(" "),n("p",[t._v("选项处理过程")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" optind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// argv中下一个要处理的元素的索引(初始为 1)")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" opterr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否输出错误信息")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" optopt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导致错误的选项字符")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" optarg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("option")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 长选项(--option)的名称")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" has_arg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0:无参数 1:有参数 2:参数可选")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// flag为NULL：getopt_long()返回val。否则getopt_long()返回0，flag指向的变量值为val(如果该option用户设置了的话)")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回值或放入flag")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结构体数组的最后一个元素必须设为0")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("如果getopt()找到下一个选项字符，就返回那个字符，更新optind和一个static变量nextchar")]),t._v(" "),n("p",[t._v("optstring包含了所有合法的选项，如果字符后面跟着一个"),n("code",[t._v(":")]),t._v("，说明需要参数，两个说明是可选参数。"),n("br"),t._v("\n如果选项中包含文本(-oarg, o 是选项，arg是文本)，则文本会保存在optarg中其他情况下，optarg设为0.\nGNU扩展,optstring中的"),n("code",[t._v("W:")]),t._v("表示将"),n("code",[t._v("-W foo")]),t._v("看作"),n("code",[t._v("--foo")]),t._v("看待。")]),t._v(" "),n("p",[t._v("默认情况下,getopt()按输入顺序排列argv的内容。所以，所有的非选项参数放在最后。\noptstring的首字符决定使用的模式")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("+")]),t._v(" 遇到任何一个非选项参数就终止选项处理")]),t._v(" "),n("li",[n("code",[t._v("-")]),t._v(" 强制将所有非选项参数看作选项的参数\n"),n("code",[t._v("--")]),t._v(" 在任何模式下都可以强行终止选项处理过程。")])]),t._v(" "),n("p",[t._v("Errors")]),t._v(" "),n("ul",[n("li",[t._v("处理的选项不再optstring中")]),t._v(" "),n("li",[t._v("设置为有参数的选项没有检测到参数\n处理")]),t._v(" "),n("li",[t._v("默认输出错误信息，将导致错误的选项字符放在optopt中，函数返回 ?")]),t._v(" "),n("li",[t._v("如果调用者将opterr设为0，则不会输出错误信息，函数仍返回 ?")]),t._v(" "),n("li",[t._v("如果optstring的第一个字符(不包括描述模式的"),n("code",[t._v("+,-")]),t._v(")为"),n("code",[t._v(":")]),t._v("。函数同样不输出错误信息，并且在设为有参数的选项没有参数时返回值变为"),n("code",[t._v(":")]),t._v("，从而可以区别出这种情况。")])]),t._v(" "),n("p",[t._v("getopt()返回值")]),t._v(" "),n("ul",[n("li",[t._v("如果所有的命令行选项都处理完了，则返回 -1.")]),t._v(" "),n("li",[t._v("如果遇到没在optstring中指定的字符，返回 ?")]),t._v(" "),n("li",[t._v("如果遇到选项丢失参数的情况，看optstring中的第一个字符，如果是"),n("code",[t._v(":")]),t._v(" 则返回 "),n("code",[t._v(":")]),t._v("，否则返回 ?")])]),t._v(" "),n("p",[n("code",[t._v("int getopt_long(int argc, char* const argv[], const char* optstring, const struct option* longopts, int* longindex)")])]),t._v(" "),n("p",[t._v("getopt_long(),getopt_long_only()")]),t._v(" "),n("ul",[n("li",[t._v("当识别到短选项时，也返回值")]),t._v(" "),n("li",[t._v("长选项，见flag注释。")]),t._v(" "),n("li",[t._v("Error和-1和getopt()一样")]),t._v(" "),n("li",[t._v("识别到模糊匹配和冗余参数会返回 ?")]),t._v(" "),n("li",[t._v("longindex为longopts的索引，如果不为NULL的话")])])])}),[],!1,null,null,null);s.default=r.exports}}]);