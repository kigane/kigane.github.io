(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{378:function(t,e,i){"use strict";i.r(e);var v=i(44),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"典型的游戏团队结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#典型的游戏团队结构"}},[t._v("#")]),t._v(" 典型的游戏团队结构")]),t._v(" "),i("ul",[i("li",[t._v("engineers\n"),i("ul",[i("li",[t._v("runtime programmer: engine&game")]),t._v(" "),i("li",[t._v("tools programmer: offline tools for whole team")])])]),t._v(" "),i("li",[t._v("artists\n"),i("ul",[i("li",[t._v("Concept artists: 概念设计")]),t._v(" "),i("li",[t._v("3D modelers: 建模师\n"),i("ul",[i("li",[t._v("foreground modelers: 人物，武器，交通工具等")]),t._v(" "),i("li",[t._v("background modelers: 静态背景几何体，如高楼，桥等")])])]),t._v(" "),i("li",[t._v("Texture artists: 纹理艺术家")]),t._v(" "),i("li",[t._v("Lighting artists: 光照艺术家，调整光照以最大化艺术和情感上的冲击")]),t._v(" "),i("li",[t._v("Animators: 动画师")]),t._v(" "),i("li",[t._v("Motion capture actors: 动捕演员，提供粗略的运动数据供动画师整理和调整")]),t._v(" "),i("li",[t._v("Sound designers: 将音效和音乐混入游戏")]),t._v(" "),i("li",[t._v("Voice actors: 角色声优")]),t._v(" "),i("li",[t._v("composers: 作曲家，负责配乐")])])]),t._v(" "),i("li",[t._v("game designers: gameplay 设计师，负责用户体验部分\n"),i("ul",[i("li",[t._v("宏观层面： 故事走向，人物和关卡的安排，玩家的宏观的目标和终点")]),t._v(" "),i("li",[t._v("微观层面： 场景设计，关卡设计，谜题设计")]),t._v(" "),i("li",[t._v("writers: 编剧")])])]),t._v(" "),i("li",[t._v("producers: 在不同工作室中的职能不尽相同\n"),i("ul",[i("li",[t._v("有些负责日程安排和人力资源管理")]),t._v(" "),i("li",[t._v("有些负责游戏设计")]),t._v(" "),i("li",[t._v("也可能会负责团队之间(如开发部门和商业部门)的联系")]),t._v(" "),i("li",[t._v("小工作室可能不需要")])])]),t._v(" "),i("li",[t._v("management&support staff\n"),i("ul",[i("li",[t._v("执行管理")]),t._v(" "),i("li",[t._v("市场")]),t._v(" "),i("li",[t._v("行政")]),t._v(" "),i("li",[t._v("IT")])])]),t._v(" "),i("li",[t._v("Publisher and Studio\n"),i("ul",[i("li",[t._v("发行商：负责游戏的营销，生产和发行，如EA,Nitendo, Sony等")]),t._v(" "),i("li",[t._v("游戏工作室\n"),i("ul",[i("li",[t._v("独立的，不依附于发行商，做好游戏后交给发行商发行，价格详谈。")]),t._v(" "),i("li",[t._v("依附于发行商的")]),t._v(" "),i("li",[t._v("第一方的：为特定平台开发游戏，如Naughty Dog 是 Sony 的第一方工作室。")])])])])])]),t._v(" "),i("h2",{attrs:{id:"什么是游戏"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是游戏"}},[t._v("#")]),t._v(" 什么是游戏？")]),t._v(" "),i("p",[t._v("Koster断言，游戏“乐趣”的核心在于“学习(learning)”和“掌握(mastering)”,就像笑话只有在你“懂了(get-it)”的时候才有趣。")]),t._v(" "),i("h3",{attrs:{id:"soft-real-time-interactive-agent-based-computer-simulations"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#soft-real-time-interactive-agent-based-computer-simulations"}},[t._v("#")]),t._v(" soft real-time interactive agent-based computer simulations.")]),t._v(" "),i("ul",[i("li",[t._v("simulations: 对现实世界(即使是想象中的现实)的近似和简化。")]),t._v(" "),i("li",[t._v("agent-based: 有大量不同的实体(entity/agent)交互")]),t._v(" "),i("li",[t._v("interactive -- interactive temporal simulations: 交互式时间模拟。游戏状态随着时间的变化而不断改变，并对无法预测的输入作出响应。")]),t._v(" "),i("li",[t._v('real-time: 所有实时系统的核心都是"deadline"。例如\n'),i("ul",[i("li",[t._v("大多数游戏渲染的帧率为30/60帧每秒。(NTSC指定的显示器刷新率为29.97帧每秒)")]),t._v(" "),i("li",[t._v("电影的帧率至少为24帧每秒。(使用3:2 pulldown，即让两个电影帧，一帧占3个视频帧，另一帧占2个视频帧)")]),t._v(" "),i("li",[t._v("物理模拟要保持稳定，一秒要计算120次。")]),t._v(" "),i("li",[t._v("角色AI至少一秒运行一次")]),t._v(" "),i("li",[t._v("音频也要每1/60 s调用一次以保持audio buffer充满，防止听觉故障。")])])]),t._v(" "),i("li",[t._v("soft: 表示即使错过了deadline也不会带来灾难性的后果。与之相反的是hard real-time system ，如直升机的航空电子系统，核电站的控制杆系统。一旦错过deadline，操作者可能会死。")])]),t._v(" "),i("h3",{attrs:{id:"游戏中的数学模型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#游戏中的数学模型"}},[t._v("#")]),t._v(" 游戏中的数学模型")]),t._v(" "),i("p",[t._v("分析型：有闭式公式。可以求得任意时刻的状态。只能解决一小部分问题。"),i("br"),t._v("\n数值型：通过不断求导等方法，估计离散点的数值。")]),t._v(" "),i("p",[t._v("通常在一个游戏循环中，每次迭代都有机会进行物理系统，AI，游戏逻辑的计算，最后根据计算结果进行渲染。")]),t._v(" "),i("h2",{attrs:{id:"什么是游戏引擎"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是游戏引擎"}},[t._v("#")]),t._v(" 什么是游戏引擎？")]),t._v(" "),i("p",[i("img",{attrs:{src:"/assets/img/game-engine-reusability-gamut.png",alt:'"game-engine-reusability-gamut"'}})]),t._v(" "),i("p",[t._v("游戏引擎与游戏的区别在于数据驱动的架构。固定的部分越多，就越难修改为其他的游戏。就越接近游戏而非游戏引擎。\n另外，一个游戏引擎或中间件越泛用，对于特定的游戏或平台，其最优性就越低。这很容易理解，每个软件在设计的时候都需要权衡(trade-off)，权衡的基准就是软件将会如何被使用或将在哪个平台运行。\n即使现在游戏引擎越来越强大，一般性与最优性的权衡仍然存在。所以顶尖的游戏工作室都会使用自研引擎。")])])}),[],!1,null,null,null);e.default=a.exports}}]);