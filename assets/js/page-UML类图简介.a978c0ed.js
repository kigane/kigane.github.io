(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{543:function(a,e,i){"use strict";i.r(e);var v=i(1),t=Object(v.a)({},(function(){var a=this,e=a.$createElement,i=a._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[i("h2",{attrs:{id:"类的表示"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#类的表示"}},[a._v("#")]),a._v(" 类的表示")]),a._v(" "),i("ul",[i("li",[a._v("类名\n"),i("ul",[i("li",[i("code",[a._v("<<Interface>>")])]),a._v(" "),i("li",[i("code",[a._v("<<abstract>>")])]),a._v(" "),i("li",[i("code",[a._v("<<Service>>")])]),a._v(" "),i("li",[i("code",[a._v("<<enumeration>>")])])])]),a._v(" "),i("li",[a._v("数据: 保护级别+类型+变量名\n"),i("ul",[i("li",[a._v("保护级别：public +, protected #, private -, package/internal ~")])])]),a._v(" "),i("li",[a._v("方法: 保护级别+方法名(参数)+返回值")])]),a._v(" "),i("Mermaid",{attrs:{id:"mermaid-382ee1ab","data-code":"classDiagram%0A%20%20%20%20Duck%0A%0A%20%20%20%20class%20Duck%20%7B%0A%20%20%20%20%20%20%20%20%3C%3CInterface%3E%3E%0A%20%20%20%20%20%20%20%20-%20int%20weight%0A%20%20%20%20%20%20%20%20%2B%20Quark()%20void%0A%20%20%20%20%7D%0A"}}),i("h2",{attrs:{id:"关系"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#关系"}},[a._v("#")]),a._v(" 关系")]),a._v(" "),i("h3",{attrs:{id:"泛化关系-generalization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#泛化关系-generalization"}},[a._v("#")]),a._v(" 泛化关系(generalization)")]),a._v(" "),i("ul",[i("li",[a._v("类的继承结构表现在UML中为：泛化(generalize)与实现(realize)")]),a._v(" "),i("li",[a._v("继承关系为 is-a 的关系，两个对象之间如果可以用 is-a 来表示，就是继承关系")]),a._v(" "),i("li",[a._v("最终代码中，泛化关系表现为继承非抽象类")]),a._v(" "),i("li",[a._v("用实线+三角箭头表示，mermaid.js中用"),i("code",[a._v("<|--")]),a._v("表示")])]),a._v(" "),i("h3",{attrs:{id:"实现关系-realize"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实现关系-realize"}},[a._v("#")]),a._v(" 实现关系(realize)")]),a._v(" "),i("ul",[i("li",[a._v("最终代码中，实现关系表现为继承抽象类")]),a._v(" "),i("li",[a._v("用虚线+三角箭头表示，mermaid.js中用"),i("code",[a._v("..|>")]),a._v("表示")])]),a._v(" "),i("h3",{attrs:{id:"聚合关系-aggregation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#聚合关系-aggregation"}},[a._v("#")]),a._v(" 聚合关系(aggregation)")]),a._v(" "),i("ul",[i("li",[a._v("用于表示实体对象之间的关系，表示整体由部分构成的语义")]),a._v(" "),i("li",[a._v("与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在。如打工人和公司")]),a._v(" "),i("li",[a._v("用实线+空心菱形箭头表示，mermaid.js中用"),i("code",[a._v("o--")]),a._v("表示")])]),a._v(" "),i("h3",{attrs:{id:"组合关系-composition"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#组合关系-composition"}},[a._v("#")]),a._v(" 组合关系(composition)")]),a._v(" "),i("ul",[i("li",[a._v("用于表示实体对象之间的关系，表示整体由部分构成的语义")]),a._v(" "),i("li",[a._v("整体和部分是强依赖的，整体不存在了，部分也就不存在了。如公司和部门")]),a._v(" "),i("li",[a._v("用实线+实心菱形箭头表示，mermaid.js中用"),i("code",[a._v("*--")]),a._v("表示")])]),a._v(" "),i("h3",{attrs:{id:"关联关系-association"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#关联关系-association"}},[a._v("#")]),a._v(" 关联关系(association)")]),a._v(" "),i("ul",[i("li",[a._v("它一般用来定义对象之间静态的、天然的结构")]),a._v(" "),i("li",[a._v("关联关系默认不强调方向，表示对象间相互知道")]),a._v(" "),i("li",[a._v("用一条直线表示，mermaid.js中用"),i("code",[a._v("--")]),a._v("表示，强调方向用"),i("code",[a._v("--\x3e")]),a._v("表示")]),a._v(" "),i("li",[a._v("在最终代码中，关联对象通常是以成员变量的形式实现的")])]),a._v(" "),i("h3",{attrs:{id:"依赖关系-dependency"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#依赖关系-dependency"}},[a._v("#")]),a._v(" 依赖关系(dependency)")]),a._v(" "),i("ul",[i("li",[a._v("描述一个对象在运行期间会用到另一个对象的关系")]),a._v(" "),i("li",[a._v("与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化")]),a._v(" "),i("li",[a._v("双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生")]),a._v(" "),i("li",[a._v("用虚线+箭头表示，mermaid.js中用"),i("code",[a._v("..>")]),a._v("表示")]),a._v(" "),i("li",[a._v("在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系")])])],1)}),[],!1,null,null,null);e.default=t.exports}}]);