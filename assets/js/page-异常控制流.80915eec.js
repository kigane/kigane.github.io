(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{546:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),a("h3",{attrs:{id:"异常和异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常和异常处理"}},[t._v("#")]),t._v(" 异常和异常处理")]),t._v(" "),a("ul",[a("li",[t._v("异常(exception)：就是控制流中的突变，用来相应处理器状态中的某些变化。")]),t._v(" "),a("li",[t._v("事件(event)：即状态变化。在处理器中，状态被编码为不同的位和信号。")]),t._v(" "),a("li",[t._v("异常号(exception number)：系统为每种类型的异常分配的唯一的非负整数标识。")]),t._v(" "),a("li",[t._v("异常表(exception table)：当处理器检测到事件发生时，会通过该表调用相应的异常处理程序。其起始地址位于一个特殊的CPU寄存器--异常表基址寄存器。在系统启动时，由操作系统分配和初始化。")]),t._v(" "),a("li",[t._v("在异常处理程序完成后，根据事件的类型，处理程序的处理方式不同。")])]),t._v(" "),a("h3",{attrs:{id:"异常的类别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常的类别"}},[t._v("#")]),t._v(" 异常的类别")]),t._v(" "),a("ul",[a("li",[t._v("中断(interrupt):是由硬件造成的，即来自处理器外部的I/O设备的信号的结果。因此，是异步的。从中断返回时，总是返回到下一条指令。(过程：执行"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("msub",[a("mi",[t._v("I")]),a("mrow",[a("mi",[t._v("c")]),a("mi",[t._v("u")]),a("mi",[t._v("r")]),a("mi",[t._v("r")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("I_{curr}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8333em","vertical-align":"-0.15em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.07847em"}},[t._v("I")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.1514em"}},[a("span",{staticStyle:{top:"-2.55em","margin-left":"-0.0785em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("c")]),a("span",{staticClass:"mord mathnormal mtight"},[t._v("u")]),a("span",{staticClass:"mord mathnormal mtight",staticStyle:{"margin-right":"0.02778em"}},[t._v("rr")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])])])])]),t._v("，发生中断，执行完"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("msub",[a("mi",[t._v("I")]),a("mrow",[a("mi",[t._v("c")]),a("mi",[t._v("u")]),a("mi",[t._v("r")]),a("mi",[t._v("r")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("I_{curr}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8333em","vertical-align":"-0.15em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.07847em"}},[t._v("I")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.1514em"}},[a("span",{staticStyle:{top:"-2.55em","margin-left":"-0.0785em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("c")]),a("span",{staticClass:"mord mathnormal mtight"},[t._v("u")]),a("span",{staticClass:"mord mathnormal mtight",staticStyle:{"margin-right":"0.02778em"}},[t._v("rr")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])])])])]),t._v("，调用中断处理程序，处理程序返回到下一条指令"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("msub",[a("mi",[t._v("I")]),a("mrow",[a("mi",[t._v("n")]),a("mi",[t._v("e")]),a("mi",[t._v("x")]),a("mi",[t._v("t")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("I_{next}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8333em","vertical-align":"-0.15em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.07847em"}},[t._v("I")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.2806em"}},[a("span",{staticStyle:{top:"-2.55em","margin-left":"-0.0785em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("n")]),a("span",{staticClass:"mord mathnormal mtight"},[t._v("e")]),a("span",{staticClass:"mord mathnormal mtight"},[t._v("x")]),a("span",{staticClass:"mord mathnormal mtight"},[t._v("t")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])])])])]),t._v(")")]),t._v(" "),a("li",[t._v("陷阱(trap)：是有意的异常。用于为用户程序和内核之间提供系统调用，让用户程序可以向内核请求服务。具体而言，用户执行"),a("code",[t._v("syscall n")]),t._v("指令，会触发一个trap，trap的处理程序解析参数，并调用适当的内核程序。另外：系统调用运行于内核模式。")]),t._v(" "),a("li",[t._v("故障(fault)：由可能能被错误处理程序修正的错误引起。如果故障处理程序能修正(如缺页异常)，则返回"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("msub",[a("mi",[t._v("I")]),a("mrow",[a("mi",[t._v("c")]),a("mi",[t._v("u")]),a("mi",[t._v("r")]),a("mi",[t._v("r")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("I_{curr}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.8333em","vertical-align":"-0.15em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.07847em"}},[t._v("I")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t vlist-t2"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.1514em"}},[a("span",{staticStyle:{top:"-2.55em","margin-left":"-0.0785em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mathnormal mtight"},[t._v("c")]),a("span",{staticClass:"mord mathnormal mtight"},[t._v("u")]),a("span",{staticClass:"mord mathnormal mtight",staticStyle:{"margin-right":"0.02778em"}},[t._v("rr")])])])])]),a("span",{staticClass:"vlist-s"},[t._v("​")])]),a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.15em"}},[a("span")])])])])])])])]),t._v("并重新执行这个引起异常的指令，如果无法修正(如除零，段错误)，则调用内核的abort例程，终止该程序。")]),t._v(" "),a("li",[t._v("终止(abort)：由不可恢复的致命错误引起，通常是硬件错误。调用内核的abort例程，终止该程序。")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Linux异常和系统调用")]),t._v(" "),a("ul",[a("li",[t._v('除法错误(0)：除零或除法溢出时发生。Unix不会从除法错误中恢复，而是会终止程序。Linux shell会报告"Floating exception"。')]),t._v(" "),a("li",[t._v('一般保护故障(13)：原因很多，通常是因为程序引用的未定义的虚拟内存区域或试图写一个只读的文本段。Linux不会恢复这类故障，会终止程序并报告"Segmentation fault"。')]),t._v(" "),a("li",[t._v("缺页异常：//TODO")])]),t._v(" "),a("p",[t._v("系统调用:syscall")]),t._v(" "),a("ul",[a("li",[t._v("系统调用时，%rax保存系统调用号，%rdi,%rsi,%rdx,%r10,%r8,%r9顺序包含最多6个参数。系统调用返回时，%rcx,%r11会被破坏，%rax包含返回值。返回值为负(-4095~-1)，说明发生了错误，会设置相应的errno。")]),t._v(" "),a("li",[t._v("常用系统调用\n"),a("ul",[a("li",[t._v("0 read 读文件")]),t._v(" "),a("li",[t._v("1 write 写文件")]),t._v(" "),a("li",[t._v("2 open 打开文件")]),t._v(" "),a("li",[t._v("3 close 关闭文件")]),t._v(" "),a("li",[t._v("4 stat 获取文件信息")]),t._v(" "),a("li",[t._v("9 mmap 将内存页映射到文件")]),t._v(" "),a("li",[t._v("12 brk 重置堆顶")]),t._v(" "),a("li",[t._v("32 dup2 复制文件描述符")]),t._v(" "),a("li",[t._v("33 pause 挂起进程，直到有信号到达")]),t._v(" "),a("li",[t._v("37 alarm 设置定时器，时间到了发送一个alarm信号给进程，默认行为会终止进程")]),t._v(" "),a("li",[t._v("39 getpid 获取进程ID")]),t._v(" "),a("li",[t._v("57 fork 创建进程")]),t._v(" "),a("li",[t._v("59 execve 执行一个程序")]),t._v(" "),a("li",[t._v("60 _exit 终止进程")]),t._v(" "),a("li",[t._v("61 wait4 等待一个进程终止")]),t._v(" "),a("li",[t._v("62 kill 向一个进程发送一个信号")])])])])]),t._v(" "),a("h2",{attrs:{id:"进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),a("ul",[a("li",[t._v("经典定义：一个执行中的程序的实例。")]),t._v(" "),a("li",[t._v("上下文(context)：程序正确运行所需的状态。包括内存中程序的的代码和数据，栈，GPRs，PC，环境变量以及打开的文件描述符的集合。")]),t._v(" "),a("li",[t._v("进程为应用程序提供的关键抽象：\n"),a("ul",[a("li",[t._v("一个独立的逻辑控制流")]),t._v(" "),a("li",[t._v("一个私有的地址空间")])])])]),t._v(" "),a("h3",{attrs:{id:"逻辑控制流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑控制流"}},[t._v("#")]),t._v(" 逻辑控制流")]),t._v(" "),a("p",[t._v("即执行程序的PC值的序列。\n"),a("img",{attrs:{src:"/assets/img/csapp-ecf-01.png",alt:"ECF01"}}),a("br"),t._v("\n关键点：进程是轮流使用处理器的，每个进程执行其流的一部分，然后被preempted(暂时挂起)，然后轮到其他进程。")]),t._v(" "),a("h3",{attrs:{id:"并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),a("ul",[a("li",[t._v("一个逻辑流的执行在"),a("strong",[t._v("时间上")]),t._v("与另一个流重叠，称为并发流(concurrent flow)，这两个流被称为并发的执行。")]),t._v(" "),a("li",[t._v("并发(concurrency)：多个流并发的执行。")]),t._v(" "),a("li",[t._v("多任务(multitask)：一个进程和其他进程轮流运行。")]),t._v(" "),a("li",[t._v("时间片(time slice)：一个进程执行其逻辑控制流的一部分的每一时间段。")]),t._v(" "),a("li",[t._v("并行流(parallel flow)：两个流并发地运行在不同的处理器或计算机上。并行流是并发流的真子集。")])]),t._v(" "),a("h3",{attrs:{id:"私有地址空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有地址空间"}},[t._v("#")]),t._v(" 私有地址空间")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/csapp-ecf-02.png",alt:"ECF02"}}),a("br"),t._v("\n进程为每个程序提供私有地址空间。通用结构如图。")]),t._v(" "),a("h3",{attrs:{id:"用户模式和内核模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户模式和内核模式"}},[t._v("#")]),t._v(" 用户模式和内核模式")]),t._v(" "),a("p",[t._v("用户模式是处理器提供的一种机制，限制应用可以执行的指令和可访问的地址空间范围，即不能使用特权指令和访问地址空间中的内核区。处理器通过某状态寄存器中的一个模式位(mode bit)确定进程处于用户模式还是内核模式。")]),t._v(" "),a("ul",[a("li",[t._v("特权指令(privileged instruction)：如停止处理器，改变模式位，发起I/O操作。")]),t._v(" "),a("li",[t._v("用户只能通过系统调用接口间接访问内核的代码和数据。任何直接访问的尝试都会导致abort。")]),t._v(" "),a("li",[t._v("进程从用户模式切换到内核模式的唯一方式是使用interrupt,fault,trap的异常处理程序。异常发生时，会调用异常处理程序，异常处理程序运行于内核模式中。异常处理程序返回后，就切换回用户模式。")]),t._v(" "),a("li",[t._v("Linux中\n"),a("ul",[a("li",[t._v("/proc文件系统提供许多用户可以访问的内核数据结构。如/proc/cpuinfo,/proc/:pid/maps(进程使用的内存段)")]),t._v(" "),a("li",[t._v("/sys文件系统提供关于系统总线和设备的低层信息。")])])])]),t._v(" "),a("h3",{attrs:{id:"上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换"}},[t._v("#")]),t._v(" 上下文切换")]),t._v(" "),a("ul",[a("li",[t._v("进程上下文\n"),a("ul",[a("li",[t._v("用户级上下文：程序块，数据块，用户堆栈")]),t._v(" "),a("li",[t._v("系统级上下文：\n"),a("ul",[a("li",[t._v("进程标识信息： pid")]),t._v(" "),a("li",[t._v("进程现场信息：寄存器内容(GPRs，浮点寄存器，某些状态寄存器)")]),t._v(" "),a("li",[t._v("进程控制信息：PC，某些状态寄存器")]),t._v(" "),a("li",[t._v("内核：内核栈和内核数据结构，包括页表，进程表，文件表。")])])])])]),t._v(" "),a("li",[t._v("上下文切换\n"),a("ul",[a("li",[t._v("保存当前进程上下文")]),t._v(" "),a("li",[t._v("恢复被切换到的进程的上下文")]),t._v(" "),a("li",[t._v("将控制转移给新进程")])])]),t._v(" "),a("li",[t._v("上下文切换时机\n"),a("ul",[a("li",[t._v("内核执行系统调用时。系统调用发起I/O请求，或使用sleep系统调用等等。")]),t._v(" "),a("li",[t._v("系统周期性中断。所有系统都有某种产生周期性定时器中断的机制，通常为1或10ms。每次发生定时器中断，内核就能判定出当前进程已经运行了足够长的时间，并切换到另一个进程。")])])])]),t._v(" "),a("h2",{attrs:{id:"系统调用错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用错误处理"}},[t._v("#")]),t._v(" 系统调用错误处理")]),t._v(" "),a("p",[t._v("Unix系统级函数出错时，会返回-1，并设置全局整数变量errno来表示什么出错了。"),a("code",[t._v("strerrno(errno)")]),t._v("返回错误的具体描述。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s, %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strerr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fork 的错误包装函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unix_error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fork error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("h2",{attrs:{id:"进程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程控制"}},[t._v("#")]),t._v(" 进程控制")]),t._v(" "),a("ul",[a("li",[t._v("每个进程都有一个唯一的正整数进程 ID(PID)。")]),t._v(" "),a("li",[t._v("每个进程都只属于一个进程组，进程组也是用一个正整数 ID 来标识的。默认的，子进程和父进程同属于一个进程组。")]),t._v(" "),a("li",[t._v("进程的三种状态\n"),a("ul",[a("li",[t._v("运行：进程正在 CPU 上执行，或在等待被执行且最终会被调度。")]),t._v(" "),a("li",[t._v("停止：进程被挂起(suspended)，不会被调度。\n"),a("ul",[a("li",[t._v("会导致停止的信号：SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU")]),t._v(" "),a("li",[t._v("进程再次运行信号：SIGCONT")])])]),t._v(" "),a("li",[t._v("终止：进程永远停止。进程终止有三种原因\n"),a("ul",[a("li",[t._v("收到一个默认行为是终止进程的信号")]),t._v(" "),a("li",[t._v("从主程序返回")]),t._v(" "),a("li",[t._v("调用exit()函数")])])])])])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回调用进程的PID")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回调用进程的父进程的PID")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpgrp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回调用进程的进程组ID")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setpgid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pgid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将pid进程的进程组改为pgid。成功返回0，否则返回-1。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setpgid(0,0)表示用当前进程的pid为名创建进程组，并将当前进程加入该进程组。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建子进程，子进程返回0，父进程返回子进程的PID。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("statusp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待pid子进程停止或终止")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 waitpid(-1, &status, 0)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" secs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将进程挂起(suspend)指定秒数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将进程挂起，直到该进程收到一个信号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在当前进程的上下文中加载并运行一个新程序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("envp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以status为退出状态终止进程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回指定的环境变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("newvalue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" overwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置环境变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsetenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除环境变量")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("h3",{attrs:{id:"fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork"}},[t._v("#")]),t._v(" fork()")]),t._v(" "),a("ul",[a("li",[t._v("fork()函数调用一次，返回两次。在子进程中返回0，在父进程中返回子进程的 PID。")]),t._v(" "),a("li",[t._v("fork()函数创建的子进程和所在的进程是并发运行的独立进程。内核能以任意方式交替执行它们的逻辑控制流中的指令。")]),t._v(" "),a("li",[t._v("fork()函数创建的子进程拥有相同但独立的地址空间。")]),t._v(" "),a("li",[t._v("fork()函数创建的子进程和所在进程共享文件。")]),t._v(" "),a("li",[t._v("进程图：每个顶点对应一条程序语句，有向边 a->b 表示语句 a 在语句 b 之前执行。在 fork 处分为两支。")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("例题")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p1: x=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p2: x=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其输出为:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子进程：p1: x=2  p2: x=1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父进程：p2: x=0 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 012的出现顺序不定(除了2一定在1前)")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"waitpid-回收子进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#waitpid-回收子进程"}},[t._v("#")]),t._v(" waitpid()--回收子进程")]),t._v(" "),a("ul",[a("li",[t._v("进程的回收(reaped)：当一个进程由于某种原因终止时，内核并不是立即把它从系统中清除。相反，进程被保持在一种已终止的状态中，直到被它的父进程回收。当父进程回收已终止的子进程时，内核将子进程的退出状态传递给父进程，然后抛弃已终止的进程，从此时开始，该进程就不存在了。")]),t._v(" "),a("li",[t._v("僵死进程(zombie)：终止了，但还没被回收的进程。会消耗内存资源。")]),t._v(" "),a("li",[t._v("如果一个父进程终止了，内核会安排 init 进程成为它的子进程的养父。init 进程的 PID 为 1，是在系统启动时由内核创建的，它不会终止，是所有进程的祖先。如果父进程没有回收它的僵死子进程就终止了，那么内核会安排 init 进程去回收它们。")])]),t._v(" "),a("p",[t._v("waitpid函数")]),t._v(" "),a("ul",[a("li",[t._v("通常行为：waitpid挂起调用进程的执行，直到它的等待集合(wait set)中的一个子进程终止。如果等待集合中的一个进程，在waitpid调用时就已经终止了，则立即返回。返回子进程的PID(此时子进程已被回收)。")]),t._v(" "),a("li",[t._v("参数 pid：指定等待集合\n"),a("ul",[a("li",[t._v("pid > 0: 等待集合就是pid指定的单独的子进程。")]),t._v(" "),a("li",[t._v("pid = -1：等待集合就是父进程的所有子进程。")]),t._v(" "),a("li",[t._v("pid = 0：等待集合就是在父进程所在进程组的所有子进程。")]),t._v(" "),a("li",[t._v("pid < 0: 等待集合就是在|pid|指定的进程组中的所有子进程。")])])]),t._v(" "),a("li",[t._v("参数 options：修改 waitpid 的默认行为\n"),a("ul",[a("li",[t._v("0:默认值。通常行为。")]),t._v(" "),a("li",[t._v("WNOHANG:如果等待集合中的一个进程，在 waitpid 调用时就已经终止了，则立即返回。如果等待集合中任何子进程都没有终止，也立即返回，返回值为 0。")]),t._v(" "),a("li",[t._v("WUNTRACED:不仅在终止时返回，停止时也返回。(停止的进程不会被回收)")]),t._v(" "),a("li",[t._v("WCONTINUED:不仅在终止时返回，在一个停止的程序继续运行时也返回。")]),t._v(" "),a("li",[t._v("选项可以组合")])])]),t._v(" "),a("li",[t._v("statusp参数指向子进程的退出状态信息status。\n"),a("ul",[a("li",[a("code",[t._v("<sys/wait.h>")]),t._v("中定义了一些宏，用于解释status。")]),t._v(" "),a("li",[t._v("WIFEXITED(status)：如果于进程通过调用 exit 或者返回正常终止，就返回真。")]),t._v(" "),a("li",[t._v("WEXITSTATUS(status)：返回一个正常终止的子进程的退出状态。只有在 WIFEXITED() 返回为真时，才会定义这个状态。")]),t._v(" "),a("li",[t._v("WIFSIGNALED(status)：如果子进程是因为一个未被捕获的信号终止的，. 那么就返回真。")]),t._v(" "),a("li",[t._v("WTERMSIG(status)：返回导致子进程终止的信号的编号。只有在 WIFSIGNALED() 返回为真时，才定义这个状态。")]),t._v(" "),a("li",[t._v("WIFSTOPPED(status)：如果引起返回的子进程当前是停止的，那么就返回真。")]),t._v(" "),a("li",[t._v("WSTOPSIG(status)：返回引起子进程停止的信号的编号。只有在 WIFSTOPPED() 返回为真时，才定义这个状态。")]),t._v(" "),a("li",[t._v("WIFCONTINUED(status)：如果子进程收到 SIGCONT 信号重新启动，则返回真。")])])]),t._v(" "),a("li",[t._v("错误条件\n"),a("ul",[a("li",[t._v("如果调用进程没有子进程(没创建或者已经回收完了)，则 waitpid 返回 -1，并设置 errno 为 ECHILD。")]),t._v(" "),a("li",[t._v("如果 waitpid 函数被一个信号中断，则返回 -1，并设置 errno 为 EINTR。")])])])]),t._v(" "),a("h3",{attrs:{id:"execve函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#execve函数"}},[t._v("#")]),t._v(" execve函数")]),t._v(" "),a("ul",[a("li",[t._v("execve 函数在当前进程上下文中加载并运行一个新程序，并会"),a("strong",[t._v("覆盖")]),t._v("当前进程的地址空间，不会创建新进程，而是继承原进程的PID和已打开文件列表。")]),t._v(" "),a("li",[t._v("execve 参数列表中，filename 为要加载的可执行目标文件， argv，envp 为传递给 main 函数的参数。")]),t._v(" "),a("li",[t._v("execve 加载 filename 后，调用_start()启动代码，启动代码设置栈，并将控制传递给新程序的 main 函数。")]),t._v(" "),a("li",[t._v("main 函数的原型 "),a("code",[t._v("int main(int argc, char *argv[], char *envp[]);")]),t._v(" "),a("ul",[a("li",[t._v("argc 为 argv 数组中非空指针的数量")]),t._v(" "),a("li",[t._v("agrv 数组中 "),a("code",[t._v("argv[0]")]),t._v(" 为可执行目标文件名，之后为执行时所带的参数列表。")]),t._v(" "),a("li",[t._v('envp 数组保存环境变量字符串(内容为"name=value"的键值对)。')])])])]),t._v(" "),a("h2",{attrs:{id:"信号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号"}},[t._v("#")]),t._v(" 信号")]),t._v(" "),a("ul",[a("li",[t._v("一种比硬件异常，上下文切换更高层的软件形式异常，它允许进程和内核中断其他进程。")]),t._v(" "),a("li",[t._v("一个信号就是一个消息，它通知进程系统中发生了一个某类型的事件。")]),t._v(" "),a("li",[t._v("某种信号类型对应每种系统事件。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("默认行为")]),t._v(" "),a("th",[t._v("相应事件")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("SIGHUP")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("终端线挂断")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("SIGINT")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("来自键盘的中断")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("SIGQUIT")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("来自键盘的退出")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[t._v("SIGILL")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("非法指令")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[t._v("SIGTRAP")]),t._v(" "),a("td",[t._v("终止并转储内存")]),t._v(" "),a("td",[t._v("跟踪陷阱")])]),t._v(" "),a("tr",[a("td",[t._v("6")]),t._v(" "),a("td",[t._v("SIGABRT")]),t._v(" "),a("td",[t._v("终止并转储内存")]),t._v(" "),a("td",[t._v("来自 abort 函数的终止信号")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[t._v("SIGBUS")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("总线错误")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[t._v("SIGFPE")]),t._v(" "),a("td",[t._v("终止并转储内存")]),t._v(" "),a("td",[t._v("浮点异常")])]),t._v(" "),a("tr",[a("td",[t._v("9")]),t._v(" "),a("td",[t._v("SIGKILL")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("杀死程序")])]),t._v(" "),a("tr",[a("td",[t._v("10")]),t._v(" "),a("td",[t._v("SIGUSR1")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("用户定义的信号 1")])]),t._v(" "),a("tr",[a("td",[t._v("11")]),t._v(" "),a("td",[t._v("SIGSEGV")]),t._v(" "),a("td",[t._v("终止并转储内存")]),t._v(" "),a("td",[t._v("无效的内存引用（段故障）")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[t._v("SIGUSR2")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("用户定义的信号 2")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[t._v("SIGPIPE")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("向一个没有读用户的管道做写操作")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[t._v("SIGALRM")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("来自 alarm 函数的定时器信号")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[t._v("SIGTERM")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("软件终止信号")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[t._v("SIGSTKFLT")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("协处理器上的栈故障")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[t._v("SIGCHLD")]),t._v(" "),a("td",[t._v("忽略")]),t._v(" "),a("td",[t._v("一个子进程停止或者终止")])]),t._v(" "),a("tr",[a("td",[t._v("18")]),t._v(" "),a("td",[t._v("SIGCONT")]),t._v(" "),a("td",[t._v("忽略")]),t._v(" "),a("td",[t._v("继续进程如果该进程停止")])]),t._v(" "),a("tr",[a("td",[t._v("19")]),t._v(" "),a("td",[t._v("SIGSTOP")]),t._v(" "),a("td",[t._v("停止直到下一个SIGCONT")]),t._v(" "),a("td",[t._v("不是来自终端的停止信号")])]),t._v(" "),a("tr",[a("td",[t._v("20")]),t._v(" "),a("td",[t._v("SIGTSTP")]),t._v(" "),a("td",[t._v("停止直到下一个SIGCONT")]),t._v(" "),a("td",[t._v("来自终端的停止信号")])]),t._v(" "),a("tr",[a("td",[t._v("21")]),t._v(" "),a("td",[t._v("SIGTTIN")]),t._v(" "),a("td",[t._v("停止直到下一个SIGCONT")]),t._v(" "),a("td",[t._v("后台进程从终端读")])]),t._v(" "),a("tr",[a("td",[t._v("22")]),t._v(" "),a("td",[t._v("SIGTTOU")]),t._v(" "),a("td",[t._v("停止直到下一个SIGCONT")]),t._v(" "),a("td",[t._v("后台进程向终端写")])]),t._v(" "),a("tr",[a("td",[t._v("23")]),t._v(" "),a("td",[t._v("SIGURG")]),t._v(" "),a("td",[t._v("忽略")]),t._v(" "),a("td",[t._v("套接字上的紧急情况")])]),t._v(" "),a("tr",[a("td",[t._v("24")]),t._v(" "),a("td",[t._v("SIGXCPU")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("CPU 时间限制超出")])]),t._v(" "),a("tr",[a("td",[t._v("25")]),t._v(" "),a("td",[t._v("SIGXFSZ")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("文件大小限制超出")])]),t._v(" "),a("tr",[a("td",[t._v("26")]),t._v(" "),a("td",[t._v("SIGVTALRM")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("虚拟定时器期满")])]),t._v(" "),a("tr",[a("td",[t._v("27")]),t._v(" "),a("td",[t._v("SIGPROF")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("剖析定时器期满")])]),t._v(" "),a("tr",[a("td",[t._v("28")]),t._v(" "),a("td",[t._v("SIGWINCH")]),t._v(" "),a("td",[t._v("忽略")]),t._v(" "),a("td",[t._v("窗口大小变化")])]),t._v(" "),a("tr",[a("td",[t._v("29")]),t._v(" "),a("td",[t._v("SIGIO")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("在某个描述符上可执行 I/O 操作")])]),t._v(" "),a("tr",[a("td",[t._v("30")]),t._v(" "),a("td",[t._v("SIGPWR")]),t._v(" "),a("td",[t._v("终止")]),t._v(" "),a("td",[t._v("电源故障")])])])]),t._v(" "),a("h3",{attrs:{id:"信号术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号术语"}},[t._v("#")]),t._v(" 信号术语")]),t._v(" "),a("ul",[a("li",[t._v("发送信号：内核通过"),a("strong",[t._v("更新目的进程上下文中的某个状态")]),t._v("，发送一个信号给目的进程。需要发送信号的两种原因\n"),a("ul",[a("li",[t._v("内核检测到某个系统事件，如除零错误或子进程终止。")]),t._v(" "),a("li",[t._v("一个进程调用了 kill 函数。")])])]),t._v(" "),a("li",[t._v("接收信号：当目的进程被内核强迫以某种方式对信号作出反应时，它就接收了信号。有三种反应\n"),a("ul",[a("li",[t._v("忽略信号")]),t._v(" "),a("li",[t._v("终止进程")]),t._v(" "),a("li",[t._v("捕获信号：即调用信号处理程序。")])])]),t._v(" "),a("li",[t._v("待处理信号(pending signal)：发出了，但没被处理的信号。在任意时刻，对一个进程而言，每个信号类型最多有一个待处理信号，后续发到该进程的同类型信号会被丢弃。也就是说，一个进程，最多接收一个信号(正在处理)并有一个同类型的待处理信号。")]),t._v(" "),a("li",[t._v("阻塞：对于信号 k，进程 p 第一次收到信号 k 时，p 接收 k，并作出合理反应。在此期间，第二次收到信号 k 时，k 就处于待处理状态，此时就说信号 k 被隐式阻塞了。如果继续收到信号 k，直接丢弃。")]),t._v(" "),a("li",[t._v("内核为每个进程维护两个信号集合\n"),a("ul",[a("li",[t._v("在 pending 位向量中维护待处理信号集合(被隐式阻塞的信号集合)")]),t._v(" "),a("li",[t._v("在 blocked 位向量中维护被阻塞的信号集合(用sigprocmask()函数阻塞的)")])])])]),t._v(" "),a("h3",{attrs:{id:"发送信号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送信号"}},[t._v("#")]),t._v(" 发送信号")]),t._v(" "),a("ul",[a("li",[t._v("/bin/kill 程序：kill -sigid pid。具体见man kill。")]),t._v(" "),a("li",[t._v("键盘：shell 中使用 job 表示进程。\n"),a("ul",[a("li",[t._v("Ctrl+C：内核发送一个 SIGINTR 信号到前台进程组中的每个进程。默认结果为终止前台进程。")]),t._v(" "),a("li",[t._v("Ctrl+Z：内核发送一个 SIGTSTP 信号到前台进程组中的每个进程。默认结果为停止前台进程。")])])]),t._v(" "),a("li",[t._v("kill() 函数")]),t._v(" "),a("li",[t._v("alarm() 函数，向进程自己发送 SIGALRM 信号。")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向pid进程发送sig信号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alarm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" secs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在secs后发送一个 SIGALRM 信号给自己。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"接收信号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收信号"}},[t._v("#")]),t._v(" 接收信号")]),t._v(" "),a("p",[t._v("当内核将进程 p 从内核模式切换到用户模式时，它会检查进程 p 的为被阻塞的待处理信号的集合(pending & ~blocked)。如果集合为空，内核将控制直接传给 p 的逻辑控制流中的下一条指令。如果集合非空，则选择某个信号 k (通常是最小的)，并且强制 p 接收信号 k。引起相应的行为(终止，终止+转储内存(Core dump)，停止，执行信号处理程序)。")]),t._v(" "),a("p",[t._v("进程可以通过 signal 函数修改和信号相关联的默认行为，除了 SIGSTOP 和 SIGKILL。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sighandler_t")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置 signum 信号的信号处理程序为 handler。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("其中 handler 可以是：")]),t._v(" "),a("ul",[a("li",[t._v("SIG_IGN：忽略信号")]),t._v(" "),a("li",[t._v("SIG_DFL：信号的默认行为")]),t._v(" "),a("li",[t._v("用户自定义函数。这个函数称为信号处理程序。调用信号处理程序称为"),a("strong",[t._v("捕获信号")]),t._v("，执行信号处理程序称为"),a("strong",[t._v("处理信号")]),t._v("。")]),t._v(" "),a("li",[t._v("信号处理程序可以被其他信号处理程序中断。")])]),t._v(" "),a("h3",{attrs:{id:"信号的阻塞和解除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号的阻塞和解除"}},[t._v("#")]),t._v(" 信号的阻塞和解除")]),t._v(" "),a("ul",[a("li",[t._v("隐式阻塞机制：内核默认阻塞任何当前处理程序正在处理的信号类型的待处理信号。")]),t._v(" "),a("li",[t._v("显示阻塞机制：使用 sigprocmask 函数设置。")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<signal.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigprocmask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" how"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("oldset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置blocked位向量，阻塞信号。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigempty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 set 为空集合")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigfillset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 set 为选择所有信号的集合")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigaddset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 signum 添加到 set")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigdelset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 set 中删除 signum")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigismember")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sigset_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" signum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断 signum 是不是 set 的成员")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("其中，how")]),t._v(" "),a("ul",[a("li",[t._v("SIG_BLOCK： 将 set 中的信号添加到 blocked 中(blocked = blocked | set)")]),t._v(" "),a("li",[t._v("SIG_UNBLOCK： blocked = blocked & ~set")]),t._v(" "),a("li",[t._v("SIG_SETMASK：blocked = set")])]),t._v(" "),a("h3",{attrs:{id:"编写信号处理程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写信号处理程序"}},[t._v("#")]),t._v(" 编写信号处理程序")]),t._v(" "),a("p",[t._v("信号处理是 Linux 系统编程最棘手的一个问题。因为")]),t._v(" "),a("ul",[a("li",[t._v("处理程序和主程序并发运行，共享同样的全局变量")]),t._v(" "),a("li",[t._v("如何及何时接收信号的规则常常违反人的直觉")]),t._v(" "),a("li",[t._v("不同系统有不同的信号处理语义")])]),t._v(" "),a("p",[t._v("//TODO")]),t._v(" "),a("ul",[a("li",[t._v("信号时不排队的，每种信号最多一个正在处理，一个待处理，其余都是直接丢弃。因此，关于信号的一个关键思想是：如果存在一个未处理的信号，就表明至少有一个信号到达了。")]),t._v(" "),a("li",[t._v("ps命令输出中的"),a("code",[t._v("<defunct>")]),t._v("表明进程为僵死进程。")])]),t._v(" "),a("h2",{attrs:{id:"非本地跳转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非本地跳转"}},[t._v("#")]),t._v(" 非本地跳转")]),t._v(" "),a("p",[t._v("另一种用户级异常控制流形式。通过 setjump 和 longjump 函数提供。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<setjmp.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmp_buf env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 env 缓冲区中保存当前调用环境，供longjmp使用，返回0。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jmp_buf env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 env 缓冲区中恢复调用环境，然后触发一个最近一次初始化 env 的 setjmp 调用的返回。然后 setjmp 返回，返回值为非零的 retval。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这两个是可被信号处理函数使用的版本。(但都不是异步信号安全的函数)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigsetjump")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sigjmp_buf env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" savesigs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("siglongjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sigjmp_buf env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" retval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("longjmp不返回，而是直接跳转到最近的setjmp，让setjmp再次返回。")]),t._v(" "),a("p",[t._v("非本地跳转的一个重要应用就是允许从一个深层嵌套的函数调用中立即返回，通常是由检测到某个错误情况引起的。")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("示例")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\njmp_buf buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" error1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" error2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Detected an error1 condition in foo\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Detected an error2 condition in foo\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unknown error condition in foo\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Deeply nested function foo */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("longjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br")])])]),t._v(" "),a("p",[t._v("非本地跳转的另一个重要应用是使一个信号处理程序分支到一个特殊的代码位置，而不是返回到被信号到达中断了的指令的位置。")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("示例")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"csapp.h"')])]),t._v("\n\nsigjmp_buf buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("siglongjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sigsetjmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SIGINT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sio_puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"starting\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sio_puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"restarting\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sio_puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"processing...\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Control never reaches here */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])])]),t._v(" "),a("h2",{attrs:{id:"操作进程的工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作进程的工具"}},[t._v("#")]),t._v(" 操作进程的工具")]),t._v(" "),a("ul",[a("li",[t._v("STRACE")]),t._v(" "),a("li",[t._v("PS")]),t._v(" "),a("li",[t._v("TOP")]),t._v(" "),a("li",[t._v("PMAP")])])])}),[],!1,null,null,null);s.default=e.exports}}]);