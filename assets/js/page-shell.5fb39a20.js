(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{567:function(t,e,s){"use strict";s.r(e);var a=s(1),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"shell-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-是什么"}},[t._v("#")]),t._v(" shell 是什么")]),t._v(" "),s("p",[t._v("核心功能：允许你执行程序，输入并获取某种半结构化的输出。")]),t._v(" "),s("h2",{attrs:{id:"shell-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-基础"}},[t._v("#")]),t._v(" shell 基础")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("hostname:~$ "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主机名:当前目录 $显示当前并非root用户")]),t._v("\nhostname:~$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" hello\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("shell 基于空格分割命令并进行解析，执行第一个单词代表的程序，后续单词将作为程序访问的参数")]),t._v(" "),s("h3",{attrs:{id:"环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),s("p",[t._v("shell去哪里找需要执行的程序呢？shell是一个编程环境，有变量，条件，循环和函数，在shell中执行命令就是在执行一段shell可以理解的代码。如果执行的命令不是shell的关键字，shell就会咨询"),s("strong",[t._v("环境变量$PATH")]),t._v('，其中，不同的路径由":"分割。')]),t._v(" "),s("p",[t._v("当然，不用$PATH，直接给出执行程序的路径也可以。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("\n/bin/echo "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"ls-l-chmod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ls-l-chmod"}},[t._v("#")]),t._v(" ls -l & chmod")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#权限     TODO  TODO  TODO 文件大小(B)  最后修改时间 文件名")]),t._v("\n-rw-r--r-- "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   user  user    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("220")]),t._v("     May "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" 02:38 .bash_logout\n-rw-r--r-- "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   user  user   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3771")]),t._v("     May "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" 02:38 .bashrc\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("权限由10个字符表示：")]),t._v(" "),s("ul",[s("li",[t._v("第一个：d 表示这是一个目录")]),t._v(" "),s("li",[t._v("后面每3个一组： 表示文件所有者(u,user)，用户组(g,group)，其他所有人(o,other)所具有的权限")]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示相应无权限")])])]),t._v(" "),s("li",[t._v("-rwx 分别表示"),s("strong",[t._v("读，写，执行")]),t._v("权限")])]),t._v(" "),s("p",[s("code",[t._v("chmod 0777 FILE")]),t._v(": 表示将FILE权限设为-rwxrwxrwx。第一个参数表示文件类型。如果不是4个数，会在前面补0，如4实际为0004。\n"),s("code",[t._v("chmod u+x FILE")]),t._v(": 表示为用户添加FILE执行权限。[ugoa][+-=][rwx]")]),t._v(" "),s("h3",{attrs:{id:"在程序间创建连接-重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在程序间创建连接-重定向"}},[t._v("#")]),t._v(" 在程序间创建连接--重定向")]),t._v(" "),s("p",[t._v("shell中程序有两个主要的流：")]),t._v(" "),s("ul",[s("li",[t._v("输入流：键盘 '/dev/stdin'")]),t._v(" "),s("li",[t._v("输出流：显示器  '/dev/stdout', '/dev/stderr'")]),t._v(" "),s("li",[t._v("空：忽略输出 /dev/null")])]),t._v(" "),s("p",[t._v("当然，可以重定向")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" hello "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hello.txt "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# hello")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" hello.txt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hello2.txt "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# hello2.txt 中内容: hello")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" world "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" hello.txt "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# hello\\nworld")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo \\ world >> hello.txt # hello\\n world 空格需要转义")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo ' world' >> hello.txt # hello\\n world 或用引号(单，双都可)包裹")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v(">, < 用于重定向流，>>用于追加内容。")]),t._v(" "),s("p",[t._v('管道(pipes)："|" 操作符，用于将一个程序的输出和另一个程序的输入连接起来。')]),t._v(" "),s("h3",{attrs:{id:"root"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#root"}},[t._v("#")]),t._v(" root")]),t._v(" "),s("p",[t._v("sudo 可以让用户以root的身份执行紧跟着的程序。")]),t._v(" "),s("p",[t._v("只有根用户才能做的操作：向"),s("code",[t._v("sysfs")]),t._v("文件写入内容，该文件暴露了一些内核参数，所以用户可以在运行时配置系统内核。系统被挂载在"),s("code",[t._v("/sys")]),t._v("下。")]),t._v(" "),s("h2",{attrs:{id:"shell脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell脚本"}},[t._v("#")]),t._v(" shell脚本")]),t._v(" "),s("ul",[s("li",[t._v("变量赋值："),s("code",[t._v("foo=bar")]),t._v("，"),s("strong",[t._v("不能有空格")])]),t._v(" "),s("li",[t._v("访问变量："),s("code",[t._v("$foo")])]),t._v(" "),s("li",[t._v("字符串：单引号表示原义字符串，其中的变量不会被转义。而双引号中变量会被转义。")])]),t._v(" "),s("h3",{attrs:{id:"bash函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bash函数"}},[t._v("#")]),t._v(" bash函数")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("mcd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("bash使用很多特殊变量表示参数")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("符号")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("脚本名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$1~$9")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("第n个参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$@")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("所有参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$#")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("参数个数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$?")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("前一个命令的返回值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$$")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前脚本的进程识别码")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("!!")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("完整的上一条命令，包括参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("$_")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("上一条命令的最后一个参数")])])])]),t._v(" "),s("p",[t._v("命令通常使用"),s("code",[t._v("STDOUT")]),t._v("返回输出值，使用"),s("code",[t._v("STDERR")]),t._v("返回错误码。返回值0表示正常执行，其他都表示有错误发生。可以搭配短路运算符("),s("code",[t._v("&&")]),t._v(","),s("code",[t._v("||")]),t._v(")进行条件判断。")]),t._v(" "),s("ul",[s("li",[t._v("同一行的多个命令可以用 ; 分隔")]),t._v(" "),s("li",[t._v("命令替换 (command substitution):以变量的形式获取一个命令的输出。通过 $(CMD) 这样的方式来执行CMD这个命令时，它的输出结果会替换掉$(CMD)。例如，如果执行 for file in $(ls) ，shell首先将调用ls ，然后遍历得到的这些返回值。")])]),t._v(" "),s("p",[t._v("示例")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Starting program at '),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# date会被替换成日期和时间")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Running program '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0")]),t._v(" with "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$#")]),t._v(" arguments with pid "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$$")]),t._v('"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" foobar "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v(" /dev/null\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果模式没有找到，则grep退出状态为 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们将标准输出流和标准错误流重定向到Null，因为我们并不关心这些信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$?")]),t._v(" -ne "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[ 中的命令必须前后空一格 ]]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"File '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file")]),t._v(' does not have any foobar, adding one"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"# foobar"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file")]),t._v('"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("在bash中进行比较时，尽量使用双方括号 [[ ]] 而不是单方括号 [ ]，这样会降低犯错的几率，尽管这样并不能兼容 sh。")]),t._v(" "),s("p",[t._v("在shebang行(脚本第一行)中使用env命令(!/usr/bin/env bash)是一种好的实践，env会用PATH环境变量来进行定位，从而提高脚本的可移植性。")]),t._v(" "),s("ul",[s("li",[t._v("函数只能用与shell使用相同的语言，脚本可以使用任意语言。因此在脚本中包含 shebang 是很重要的。")]),t._v(" "),s("li",[t._v("函数仅在定义时被加载，脚本会在每次被执行时加载。这让函数的加载比脚本略快一些，但每次修改函数定义，都要重新加载一次。")]),t._v(" "),s("li",[t._v("函数会在当前的shell环境中执行，脚本会在单独的进程中执行。因此，函数可以对环境变量进行更改，比如改变当前工作目录，脚本则不行。脚本需要使用export将环境变量导出，并将值传递给环境变量。")])]),t._v(" "),s("h3",{attrs:{id:"文件描述符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件描述符"}},[t._v("#")]),t._v(" 文件描述符")]),t._v(" "),s("ul",[s("li",[t._v("0 STDIN  标准输入 键盘 '/dev/stdin'")]),t._v(" "),s("li",[t._v("1 STDOUT 标准输出 显示器 '/dev/stdout', '/dev/stderr'")]),t._v(" "),s("li",[t._v("2 STDERR 标准错误")]),t._v(" "),s("li",[t._v("空：忽略输出 /dev/null")])]),t._v(" "),s("p",[t._v('当文件描述符(0,1,2)与重定向符号"<, >"组合之后，就可以重新定向输入，输出，及错误。')]),t._v(" "),s("ul",[s("li",[s("code",[t._v("command 2>file1")]),t._v(" 命令执行的错误信息保存到了file1文件中。显示屏只是显示正确的信息。")]),t._v(" "),s("li",[s("code",[t._v("command 1>file1 2>file2")]),t._v(" 命令执行后，没有显示。因为正确输出到file1，错误定向到file2")]),t._v(" "),s("li",[s("code",[t._v("command &>file1")]),t._v(" 命令执行后，输出和错误都定向到file1中\nPS:2>file 可以放在命令的前面，也可以放在后面。效果一样。")])]),t._v(" "),s("p",[t._v("在shell脚本中，进行流的重定向")]),t._v(" "),s("ul",[s("li",[t._v("exec 1> file1")]),t._v(" "),s("li",[t._v("exec 2> file2")]),t._v(" "),s("li",[t._v("exec 0< file0")])]),t._v(" "),s("p",[t._v("指定命令的输出传到STDERR指定的文件: "),s("code",[t._v('echo "some output" >&2')])]),t._v(" "),s("h2",{attrs:{id:"shell工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell工具"}},[t._v("#")]),t._v(" shell工具")]),t._v(" "),s("h3",{attrs:{id:"查看程序执行时间-time"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看程序执行时间-time"}},[t._v("#")]),t._v(" 查看程序执行时间--time")]),t._v(" "),s("h3",{attrs:{id:"查找文件-find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找文件-find"}},[t._v("#")]),t._v(" 查找文件--find")]),t._v(" "),s("p",[t._v("find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]")]),t._v(" "),s("p",[t._v("find会搜索以每个给出的starting-point为根的文件树，找出匹配expression的文件。默认的starting-point为"),s("code",[t._v(".")]),t._v("。")]),t._v(" "),s("p",[t._v("选项")]),t._v(" "),s("ul",[s("li",[t._v("-P 将symbolic links视为文件，不搜索其指向的文件。这是默认行为")]),t._v(" "),s("li",[t._v("-L 搜索symbolic links指向的文件")]),t._v(" "),s("li",[t._v("-H 不搜索symbolic links，除了在处理命令行参数的时候。(应该说的是最后的expression)")]),t._v(" "),s("li",[t._v("以上三个只能选一个。同时出现，只有最后一个生效。")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("-D 打印find命令的诊断信息")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("-Olevel 优化等级\n"),s("ul",[s("li",[t._v("0,1 默认等级。expressions重新排序，-name,-regex测试首先进行")]),t._v(" "),s("li",[t._v("2 -type,-xtype首先执行。")]),t._v(" "),s("li",[t._v("3 所有cost-based查询优化符都会启用。如果有必要的话，测试的顺序会以代价小的优先。")])])])]),t._v(" "),s("p",[t._v("表达式--描述如何匹配文件和如何处理匹配的文件")]),t._v(" "),s("ul",[s("li",[t._v("组成\n"),s("ul",[s("li",[t._v("Tests 返回T/F，通常以文件的属性为判断基础。")]),t._v(" "),s("li",[t._v("Actions 会产生其他影响。也会返回T/F，但以action的成功与否为基础。")]),t._v(" "),s("li",[t._v("Global options 总返回true。会影响所有Tests和Actions的行为。")]),t._v(" "),s("li",[t._v("Positional options 总返回true。只影响紧随其后的Tests或Actions。")]),t._v(" "),s("li",[t._v("Operators expression中其他东西的连接符。默认为 "),s("code",[t._v("-a")]),t._v(" 即 "),s("code",[t._v("AND")])])])]),t._v(" "),s("li",[t._v("Positional options\n"),s("ul",[s("li",[t._v("-daystart 时间度量从今天0:00开始，而非24小时前。")]),t._v(" "),s("li",[t._v("-regextype type 改变正则表达式的语法。具体请 -regextype help")]),t._v(" "),s("li",[t._v("-warn,-nowarn 打开或关闭警告信息")])])]),t._v(" "),s("li",[t._v("Global options\n"),s("ul",[s("li",[t._v("-d/-depth 先处理每个目录的内容，再处理目录本身")]),t._v(" "),s("li",[t._v("-maxdepth levels 目录树的最大展开深度。0表示只处理starting-point本身这个根节点。")]),t._v(" "),s("li",[t._v("-mindepth levels 目录树的最小展开深度。1表示只不处理starting-point本身这个根节点。")])])]),t._v(" "),s("li",[t._v("Tests\n"),s("ul",[s("li",[t._v("数字参数 +n 大于n, -n 小于n, n 正好n。")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("-xmin n 文件最后一次x是n分钟以前吗？")]),t._v(" "),s("li",[t._v("-xnewer reference 文件比指定文件的x更新吗？")]),t._v(" "),s("li",[t._v("-xtime n 文件最后一次x是n*24小时以内吗？(+1表示48小时以内，以次类推)")]),t._v(" "),s("li",[t._v("其中x可为\n"),s("ul",[s("li",[t._v("a access，表示文件的上次使用时间。")]),t._v(" "),s("li",[t._v("c change，表示文件状态的上次修改时间。")]),t._v(" "),s("li",[t._v("m modify，表示文件数据的上次修改时间。没有mnewer，因为-newer的默认行为就是这个。")])])]),t._v(" "),s("li",[t._v("-newerXY reference 如果文件的X时间比Y时间新，则返回true。X,Y可以是\n"),s("ul",[s("li",[t._v("a accsess time")]),t._v(" "),s("li",[t._v("B birthtime")]),t._v(" "),s("li",[t._v("c inode status change time")]),t._v(" "),s("li",[t._v("m modification time")]),t._v(" "),s("li",[t._v("t reference直接解释为时间。")])])]),t._v(" "),s("li",[t._v("-used n 文件上次status改变后到最后access时间过了n天")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("-empty 空文件或空文件夹")]),t._v(" "),s("li",[t._v("-executable 当前用户可执行的文件")]),t._v(" "),s("li",[t._v("-gid n 文件的数字组(group)ID为n")]),t._v(" "),s("li",[t._v("-group gname 文件属于特定组")]),t._v(" "),s("li",[t._v("-uid n")]),t._v(" "),s("li",[t._v("-user uname")]),t._v(" "),s("li",[t._v("-ilname,-iname,-ipath,-iregex 忽略大小写版本")]),t._v(" "),s("li",[t._v("-inum n 文件有n个inode")]),t._v(" "),s("li",[t._v("-links n 文件有n个hard link")]),t._v(" "),s("li",[t._v("-lname pattern 文件是symbolic link且内容和pattern匹配。(如果使用的-L选项，则总返回false)")]),t._v(" "),s("li",[t._v("-name pattern 匹配文件名(只会用文件名取匹配，不包含任何"),s("code",[t._v("/")]),t._v(")。元字符"),s("code",[t._v("*")]),t._v(" "),s("code",[t._v("?")]),t._v(" "),s("code",[t._v("[]")]),t._v("会匹配以"),s("code",[t._v(".")]),t._v(" 开头的文件。要忽略以"),s("code",[t._v(".")]),t._v("开头的文件和文件夹，使用-prune选项。")]),t._v(" "),s("li",[t._v("-path pattern 匹配完整的文件名(包含以某个starting point开始的路径，例如 ./src/hello.c)。注意：文件夹的末尾不会加"),s("code",[t._v("/")]),t._v("。")]),t._v(" "),s("li",[t._v("-wholename pattern 匹配完整的文件名(绝对路径)。")]),t._v(" "),s("li",[t._v("-regex pattern 匹配完整的文件名。(必须匹配整个完整的文件名，例如'./fubar3' 必须用'.*bar.'匹配)")]),t._v(" "),s("li",[t._v("-perm mode 所有的权限匹配。mode 0xxx，参考chmod")]),t._v(" "),s("li",[t._v("-perm -mode 所有的权限都有。 -[ugoa][rwx]")]),t._v(" "),s("li",[t._v("-perm /mode 有其中一个权限")]),t._v(" "),s("li",[t._v("-readable 当前用户可读")]),t._v(" "),s("li",[t._v("-writable 当前用户可写")]),t._v(" "),s("li",[t._v("-size n[cwbkMG] 使用n单位的空间的文件，会舍入。\n"),s("ul",[s("li",[t._v("b 表示512B为一个单位")]),t._v(" "),s("li",[t._v("c bytes")]),t._v(" "),s("li",[t._v("w two-byte word")]),t._v(" "),s("li",[t._v("k KiB, 1024B")]),t._v(" "),s("li",[t._v("M MiB, 1024k")]),t._v(" "),s("li",[t._v("G GiB, 1024M")])])]),t._v(" "),s("li",[t._v("-type c 类型c包括\n"),s("ul",[s("li",[t._v("b block(buffered) special")]),t._v(" "),s("li",[t._v("c character(unbuffered) special")]),t._v(" "),s("li",[t._v("d 目录")]),t._v(" "),s("li",[t._v("p named pipe(FIFO)")]),t._v(" "),s("li",[t._v("f 常规文件")]),t._v(" "),s("li",[t._v("l symbolic link")]),t._v(" "),s("li",[t._v("s socket")]),t._v(" "),s("li",[t._v("D door")])])]),t._v(" "),s("li",[t._v("-xtype 对symbolic link类型的文件，xtype会检查该link文件，而type不会。")])])]),t._v(" "),s("li",[t._v("Actions\n"),s("ul",[s("li",[t._v("-delete 删除文件，成功时返回true。")]),t._v(" "),s("li",[t._v("-exec cmd; 执行cmd;，当cmd返回状态0时返回true。cmd会为每个匹配的文件执行一次。cmd会在执行find命令的起始目录执行。"),s("code",[t._v("{}")]),t._v("表示当前匹配的文件，"),s("code",[t._v(";")]),t._v("表示命令结束。")]),t._v(" "),s("li",[t._v("-exec cmd {} + "),s("code",[t._v("-exec")]),t._v("的变体，执行cmd，所有匹配的文件都用空格连接后作为参数放在cmd后。")]),t._v(" "),s("li",[t._v("-execdir cmd ;")]),t._v(" "),s("li",[t._v("-execdir cmd {} + cmd会在匹配文件所在目录执行")]),t._v(" "),s("li",[t._v("-ok cmd ;")]),t._v(" "),s("li",[t._v("-okdir cmd ; 执行命令时会弹出提示框，问你是否执行。")]),t._v(" "),s("li",[t._v("-ls 以ls -dils 的格式输出当前文件。")]),t._v(" "),s("li",[t._v("-fls file 将-ls的输出输出到file文件中。 如果file不存在，创建一个新的，否则，覆盖(truncated)。")]),t._v(" "),s("li",[t._v("-print 将完整文件名输出，以newline隔开。默认选项")]),t._v(" "),s("li",[t._v("-print0  将完整文件名输出，以'\\0'隔开。")]),t._v(" "),s("li",[t._v("-printf format\n"),s("ul",[s("li",[t._v("%p 文件名 '%h/%f'")]),t._v(" "),s("li",[t._v("%P 不包含starting-point的文件名")]),t._v(" "),s("li",[t._v("%f 纯文件名")]),t._v(" "),s("li",[t._v("%F 文件使用的文件系统")]),t._v(" "),s("li",[t._v("%h 文件所在的文件夹名")]),t._v(" "),s("li",[t._v("%y 文件的类型")]),t._v(" "),s("li",[t._v("%i 文件的十进制inode数")]),t._v(" "),s("li",[t._v("%k 文件大小kB")]),t._v(" "),s("li",[t._v("%m 文件的八进制权限bit")]),t._v(" "),s("li",[t._v("%M 文件的权限符号表示")]),t._v(" "),s("li",[t._v("%s 文件大小B")]),t._v(" "),s("li",[t._v("%t/%a/%c/%Tk/%Ak/%Ck 文件时间，k为时间的表示方式。")]),t._v(" "),s("li",[t._v("%d 文件在目录树中的深度，0表示根节点starting-point。")])])]),t._v(" "),s("li",[t._v("-fprint/-fprint0/-fprintf file [format]")]),t._v(" "),s("li",[t._v("-prune 如果文件是目录，不要进入。如果使用了-depth,-delete，则无效。")]),t._v(" "),s("li",[t._v("-quit 立即退出。")])])]),t._v(" "),s("li",[t._v("Operators 按优先级降序\n"),s("ul",[s("li",[t._v("( expr ) 因为shell中括号有特殊含义，最好这么写'(expr)'")]),t._v(" "),s("li",[t._v("! expr")]),t._v(" "),s("li",[t._v("expr1 [-a] expr2 -a等于AND")]),t._v(" "),s("li",[t._v("expr1 -o expr2 -o等于OR")]),t._v(" "),s("li",[t._v("expr1, expr2 两个表达式都会被评估，但最后一个表达式的返回值成为整个列表的返回值。可以用于搜索一些不同类型的目标，但只遍历一次。")]),t._v(" "),s("li",[t._v("注意-a 比 -o 优先级高，意味着什么。举例来说，find . -name afile -o -name bfile -print 不会输出afile。")])])])]),t._v(" "),s("p",[t._v("例如")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有名称为src的文件夹")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name src -type d\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有文件夹路径中包含test的python文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -path "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*/test/*.py'")]),t._v(" -type f\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找前一天修改的所有文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -mtime -1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有大小在500k至10M的tar.gz文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -size +500k -size -10M -name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.tar.gz'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("除了列出所寻找的文件之外，find还能对所有查找到的文件进行操作。这能极大地简化一些单调的任务。")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除全部扩展名为.tmp 的文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.tmp'")]),t._v(" -exec "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找全部的 PNG 文件并将其转换为 JPG")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*.png'")]),t._v(" -exec convert "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".jpg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"xargs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xargs"}},[t._v("#")]),t._v(" xargs")]),t._v(" "),s("p",[t._v("xargs [opts] [cmd [initial-args]]")]),t._v(" "),s("p",[t._v("xargs从标准输入读取items(以blank或newline为分隔符划分，空行直接忽略)，建立并执行cmd命令。initial-args默认是用item填，直到达到系统定义的命令行限制。这样，cmd的总调用数会相对变少，性能表现好些。另外，xargs默认会将blank和newline特殊处理，所以，包含blank和newline的文件名不会被正确处理，需要使用-0选项。")]),t._v(" "),s("p",[t._v("选项")]),t._v(" "),s("ul",[s("li",[t._v("-t, --verbose 在执行cmd前，将其用STDERR输出")]),t._v(" "),s("li",[t._v("-p, --interactive 执行每个命令前让用户决定是否执行")]),t._v(" "),s("li",[t._v("-a file, --arg-file=file 从file读取输入，而非STDIN。如果使用了这个选项，则STDIN在执行cmd时不会变，否则会被重定向到/dev/null。")]),t._v(" "),s("li",[t._v("-r 如果标准输入为空，则不要执行任何cmd。xargs默认会至少执行一次")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("-L max-lines 每个cmd使用的非空输入最多为max-line行。")]),t._v(" "),s("li",[t._v("-n max-args, --max-args=max-args 每个cmd最多使用max-args的参数。如果在达到max-args之前，size超了，则停。")]),t._v(" "),s("li",[t._v("-s max-chars, --max-chars=max-chars 限制每个cmd最多使用的字符数，包括cmd和initail-args和最后的'\\0'。最多不能超过系统命令行限制。")]),t._v(" "),s("li",[t._v("-x, --exit 如果size超了，直接退出")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("--show-limits 显示os的命令行长度限制。 最好这么用："),s("code",[t._v("xargs --show-limits 0< /dev/null")])]),t._v(" "),s("li",[t._v("-P max-procs, --max-procs=max-proc 多线程执行。默认为1，设为0表示使用尽可能多的线程。")]),t._v(" "),s("li",[t._v("-0, --null items会以'\\0'结束，而非空格。所有字符都取字面量。通常和find -print0连用。")]),t._v(" "),s("li",[t._v("-d delim, --delimiter=delim 输入item解析终止符。仅支持单个字符。")]),t._v(" "),s("li",[t._v("-E eof-str 如果在输入的某一行出现了eof-str，则其余的输入被忽略。")])]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" /tmp -name core -type f -print "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" /bin/rm -f\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" /tmp -name core -type f -print0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -0 /bin/rm -f\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"wc-代码统计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wc-代码统计"}},[t._v("#")]),t._v(" wc--代码统计")]),t._v(" "),s("p",[t._v("print newline, word, and byte counts for each file.")]),t._v(" "),s("p",[t._v("用法")]),t._v(" "),s("ul",[s("li",[t._v("wc [OPTION] ... [FILE] ...")]),t._v(" "),s("li",[t._v("wc [OPTION] ... --file0-from=F")]),t._v(" "),s("li",[t._v("如果没有指定FILE或FILE=-，则以标准输入为输入。")])]),t._v(" "),s("p",[t._v("选项")]),t._v(" "),s("ul",[s("li",[t._v("统计信息显示的相对顺序：newline, word, character, byte, maximum line length")]),t._v(" "),s("li",[t._v("-c, --bytes")]),t._v(" "),s("li",[t._v("-m, --chars")]),t._v(" "),s("li",[t._v("-l, --lines")]),t._v(" "),s("li",[t._v("--files0-from=F 用C风格字符串指定的所有输入文件")]),t._v(" "),s("li",[t._v("-L, --max-line-length")]),t._v(" "),s("li",[t._v("-w, --words")])]),t._v(" "),s("h3",{attrs:{id:"查找代码-grep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找代码-grep"}},[t._v("#")]),t._v(" 查找代码--grep")]),t._v(" "),s("p",[t._v("grep 有很多选项，如 -C ：获取查找结果的上下文（Context）；-v 将对结果进行反选（Invert），也就是输出不匹配的结果。例如， grep -C 5 会输出匹配结果前后五行。当需要搜索大量文件的时候，使用 -R 会递归地进入子目录并搜索所有的文本文件。")]),t._v(" "),s("h3",{attrs:{id:"sed-流编辑器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sed-流编辑器"}},[t._v("#")]),t._v(" sed--流编辑器")]),t._v(" "),s("p",[t._v("sed [opts] [script] [input-file]")]),t._v(" "),s("ul",[s("li",[t._v("-n 使用安静模式，不会总显示stdin的所有行，只显示被sed处理的行。")]),t._v(" "),s("li",[t._v("-f scriptfile 读取文件中的操作脚本，并执行")]),t._v(" "),s("li",[t._v("-r 使用扩展的正则表达式语法")]),t._v(" "),s("li",[t._v("-i 直接修改文件内容")]),t._v(" "),s("li",[t._v("script\n"),s("ul",[s("li",[t._v("#a content: 在#行，后新增一行，内容为content")]),t._v(" "),s("li",[t._v("#i content: 在#行，前新增一行，内容为content")]),t._v(" "),s("li",[t._v("l,hc content: 将l行到h行的内容替换为content")]),t._v(" "),s("li",[t._v("l,hd: 删除l行到h行。$表示最后一行")]),t._v(" "),s("li",[t._v("l,hp: 打印l行到h行。")]),t._v(" "),s("li",[t._v("[l,h]s/old/new/g: 查找并替换")])])])]),t._v(" "),s("h3",{attrs:{id:"awk-行文本处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#awk-行文本处理"}},[t._v("#")]),t._v(" awk--行文本处理")]),t._v(" "),s("p",[t._v("常见用法: awk 'program text' file, 从file中读取输入，每一行都用'program text'处理。")]),t._v(" "),s("ul",[s("li",[t._v("awk每次处理一行，最小处理单位为字段(field, 以空格分隔)")]),t._v(" "),s("li",[t._v("变量\n"),s("ul",[s("li",[t._v("$0 整行")]),t._v(" "),s("li",[t._v("$# 第#个字段")]),t._v(" "),s("li",[t._v("NF 一行的字段总数")]),t._v(" "),s("li",[t._v("NR 当前awk处理的是第几行")]),t._v(" "),s("li",[t._v("FS 目前的分隔符，默认为空格")])])]),t._v(" "),s("li",[t._v("逻辑运算 >,<,>=, <=, ==, !=")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("mawk [-F separator] [-v var=value] [--] 'program text' [file...]"),s("br"),t._v("\nmawk [-F separator] [-v var=value] [-f program-file] [--] [file...]")]),t._v(" "),s("ul",[s("li",[t._v("-F 指定分隔符")]),t._v(" "),s("li",[t._v("-v 预先设置变量")]),t._v(" "),s("li",[t._v("-f 从指定的文件中读取awk程序")]),t._v(" "),s("li",[t._v("file 输入，未指定则从STDIN中读取")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("AWK语言")]),t._v(" "),s("ul",[s("li",[t._v("程序结构： pattern{action}的序列\n"),s("ul",[s("li",[t._v("pattern可以是\n"),s("ul",[s("li",[t._v("BEGIN 在处理第一行之前顺序执行所有的 BEGIN 后的action。")]),t._v(" "),s("li",[t._v("END 在处理最后一行之后顺序执行所有的 END 后的action。")]),t._v(" "),s("li",[t._v("expr")]),t._v(" "),s("li",[t._v("expr1, expr2")])])]),t._v(" "),s("li",[t._v("语句以"),s("code",[t._v(";")]),t._v("或newline结束。")]),t._v(" "),s("li",[t._v("控制流\n"),s("ul",[s("li",[t._v("if (expr) statement")]),t._v(" "),s("li",[t._v("if (expr) statement else statement")]),t._v(" "),s("li",[t._v("while (expr) statement")]),t._v(" "),s("li",[t._v("do statement while (expr)")]),t._v(" "),s("li",[t._v("for (opt_expr; opt_expr; opt_expr) statement")]),t._v(" "),s("li",[t._v("for (var in array) statement")]),t._v(" "),s("li",[t._v("continue")]),t._v(" "),s("li",[t._v("break")])])])])]),t._v(" "),s("li",[t._v("数据类型：numeric和string。\n"),s("ul",[s("li",[t._v("所有numeric都是以浮点数为内部表示和运算。true == 1.0")]),t._v(" "),s("li",[t._v("string常量以双引号表示")])])]),t._v(" "),s("li",[t._v("正则表达式\n"),s("ul",[s("li",[t._v("expr ~ /regex/ 如果expr匹配regex，则返回1.")]),t._v(" "),s("li",[t._v("expr !~ /regex/ 如果expr不匹配regex，则返回1.")]),t._v(" "),s("li",[t._v("/r/ {action} 相当于 $0 ~ /r/ {action}, 当行匹配r时，才执行action")])])]),t._v(" "),s("li",[t._v("内置变量\n"),s("ul",[s("li",[t._v("$0 整行")]),t._v(" "),s("li",[t._v("$# 第#个字段")]),t._v(" "),s("li",[t._v("NF 第一行的字段总数")]),t._v(" "),s("li",[t._v("NR 当前awk处理的是第几行")]),t._v(" "),s("li",[t._v("FS 目前的field分隔符，默认为空格")]),t._v(" "),s("li",[t._v("RS record分隔符，默认为'\\n'")]),t._v(" "),s("li",[t._v("OFS,ORS 输出时的相应分隔符")]),t._v(" "),s("li",[t._v("ARGC")]),t._v(" "),s("li",[t._v("ARGV")]),t._v(" "),s("li",[t._v("FILENAME 输入文件的文件名")])])]),t._v(" "),s("li",[t._v("内置函数\n"),s("ul",[s("li",[t._v("数学函数\n"),s("ul",[s("li",[t._v("atan2(y, x)")]),t._v(" "),s("li",[t._v("cos(x)")]),t._v(" "),s("li",[t._v("sin(x)")]),t._v(" "),s("li",[t._v("exp(x)")]),t._v(" "),s("li",[t._v("int(x) 向0舍入")]),t._v(" "),s("li",[t._v("log(x) 自然对数")]),t._v(" "),s("li",[t._v("rand()")]),t._v(" "),s("li",[t._v("srand(seed)")]),t._v(" "),s("li",[t._v("sqrt(x)")])])]),t._v(" "),s("li",[t._v("mktime(format)")]),t._v(" "),s("li",[t._v("String\n"),s("ul",[s("li",[t._v("index(s, t) t在s中的起始位置")]),t._v(" "),s("li",[t._v("length(s)")]),t._v(" "),s("li",[t._v("match(s, r) 返回s中第一个r的位置")]),t._v(" "),s("li",[t._v("split(s, A, r) 用r分割s为一系列field，并以数组形式存储在A中。如果r省略，默认为FS。")]),t._v(" "),s("li",[t._v("sprintf(format, expr-list) 返回一个格式串")]),t._v(" "),s("li",[t._v("sub(r, s, t) 替换一次 将t中的r替换成s。 t缺省为$0")]),t._v(" "),s("li",[t._v("gsub(r, s, t) 全部替换")]),t._v(" "),s("li",[t._v("substr(s, i, n) 返回s第i个字符后的n个字符，n省略，则返回i后所有字符。(包含第i个)")]),t._v(" "),s("li",[t._v("tolower(s) 将s中全部字符换为小写")]),t._v(" "),s("li",[t._v("toupper(s)")])])])])]),t._v(" "),s("li",[t._v("输出\n"),s("ul",[s("li",[t._v("print 将$0输出")]),t._v(" "),s("li",[t._v("print expr1,expr2,... 输出 expr1 OFS expr2 OFS...ORS")]),t._v(" "),s("li",[t._v("printf format, expr-list")]),t._v(" "),s("li",[t._v("getline 略")])])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("示例")]),t._v(" "),s("ol",[s("li",[t._v("模拟cat {print}")]),t._v(" "),s("li",[t._v("模拟wc {chars += length($0) + 1 # add 1 for the '\\n'\nwords += NF}\nEND {print NR, words, chars}")]),t._v(" "),s("li",[t._v("排序文件")])]),t._v(" "),s("div",{staticClass:"language-awk line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{line[NR] = $0 ""} # 确保每一行都是string类型\nEND {\n    isort(line, NR)\n    for (i =1; i <=NR; i++) print line[i]    \n}\n \nfunction isort(A, n,  i, j, hold)\n{\n    for (i = 2; i <= n; i++)\n    {\n        hold = A[j = i]\n        while (A[j-1] > hold)\n        { j--; A[j+1] = A[j]}\n        A[j] = hold\n    }\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("h3",{attrs:{id:"nl-加行号显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nl-加行号显示"}},[t._v("#")]),t._v(" nl--加行号显示")]),t._v(" "),s("p",[s("code",[t._v("nl [opts] [file]")]),t._v(" file为"),s("code",[t._v("-")]),t._v("或未指定时，从STDIN读入。")]),t._v(" "),s("h3",{attrs:{id:"文件夹导航"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件夹导航"}},[t._v("#")]),t._v(" 文件夹导航")]),t._v(" "),s("p",[t._v("fasd和autojump这两个工具来查找最常用或最近使用的文件和目录。")]),t._v(" "),s("p",[t._v("Fasd 基于frecency对文件和文件排序，也就是说它会同时针对频率（frequency ）和时效（ recency）进行排序。默认情况下，fasd使用命令 z 帮助我们快速切换到最常访问的目录。例如， 如果您经常访问/home/user/files/cool_project 目录，那么可以直接使用 z cool 跳转到该目录。对于 autojump，则使用j cool代替即可。")]),t._v(" "),s("h2",{attrs:{id:"cheatsheet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cheatsheet"}},[t._v("#")]),t._v(" cheatsheet")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("命令")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("man")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("用户手册")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("cd")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("切换目录")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("pwd")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前工作目录")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("which")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("确定某个程序名代表的是哪个具体程序")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("ls")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("显示目录包含的文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("mv")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("移动或重命名文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("cp")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("复制文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("rm")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("删除文件")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("mkdir")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("新建文件夹")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("touch")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("创建文件或修改文件时间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("chmod [mode] FILE")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("修改文件权限")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("grep [pattern] FILE")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("打印pattern匹配成功的行")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}})])])])])}),[],!1,null,null,null);e.default=v.exports}}]);